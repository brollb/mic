/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Tue Sep 24 2019 07:30:03 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of UpdateGraphPositions.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin UpdateGraphPositions.
     * @constructor
     */
    function UpdateGraphPositions() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    UpdateGraphPositions.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    UpdateGraphPositions.prototype = Object.create(PluginBase.prototype);
    UpdateGraphPositions.prototype.constructor = UpdateGraphPositions;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    UpdateGraphPositions.prototype.main = function (callback) {
        var self = this,
            core = self.core,
            config = self.getCurrentConfig(),
            positions = JSON.parse(config.positions),
            graphNode = self.activeNode;

        core.loadChildren(graphNode)
        .then(function(children){
            children.forEach(function(child){
                let name = core.getAttribute(child,'name');

                if(positions.hasOwnProperty(name)){
                    core.setRegistry(child,'position',positions[name]);
                }
            });
            return self.save('Updated graph node positions.');
        })
        .then(function(){
            self.result.setSuccess(true);
            callback(null, self.result);
        })
        .catch(function(err){
            // Result success is false at invocation.
            self.logger.error(err.stack);
            callback(err, self.result);
        });
    };

    return UpdateGraphPositions;
});
